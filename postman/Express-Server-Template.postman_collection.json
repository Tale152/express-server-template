{
	"info": {
		"_postman_id": "12345678-1234-1234-1234-123456789012",
		"name": "Express Server Template API",
		"description": "Complete API collection for Express Server Template. Updated for September 2025 with all current endpoints.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12345678"
	},
	"item": [
		{
			"name": "Authentication",
			"description": "Authentication endpoints for user registration, login, logout, and token management. Includes automatic token handling in environment variables.",
			"item": [
				{
					"name": "Register User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('accessToken', response.accessToken);",
									"    pm.environment.set('refreshToken', response.refreshToken);",
									"    pm.environment.set('userId', response.user.id);",
									"    pm.environment.set('username', response.user.username);",
									"    pm.test('Registration successful', function () {",
									"        pm.expect(pm.response.code).to.eql(201);",
									"        pm.expect(response.accessToken).to.be.a('string');",
									"        pm.expect(response.refreshToken).to.be.a('string');",
									"        pm.expect(response.user.username).to.eql(pm.variables.get('testUsername'));",
									"    });",
									"} else {",
									"    pm.test('Registration failed', function () {",
									"        pm.expect(pm.response.code).to.be.oneOf([400, 409]);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Use custom username/password if set in environment, otherwise generate random ones for testing",
									"const currentUsername = pm.environment.get('testUsername');",
									"const currentPassword = pm.environment.get('testPassword');",
									"",
									"console.log('Current testUsername:', currentUsername);",
									"console.log('Current testPassword:', currentPassword);",
									"",
									"if (!currentUsername || currentUsername.trim() === '') {",
									"    const timestamp = Date.now();",
									"    const randomNum = Math.floor(Math.random() * 1000);",
									"    const generatedUsername = `testuser_${timestamp}_${randomNum}`;",
									"    pm.environment.set('testUsername', generatedUsername);",
									"    console.log('Generated username:', generatedUsername);",
									"} else {",
									"    console.log('Using existing username:', currentUsername);",
									"}",
									"",
									"if (!currentPassword || currentPassword.trim() === '') {",
									"    pm.environment.set('testPassword', 'TestPassword123');",
									"    console.log('Generated password: TestPassword123');",
									"} else {",
									"    console.log('Using existing password');",
									"}",
									"",
									"// Verify the values are set",
									"console.log('Final testUsername:', pm.environment.get('testUsername'));",
									"console.log('Final testPassword:', pm.environment.get('testPassword'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"{{testUsername}}\",\n  \"password\": \"{{testPassword}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"register"
							]
						},
						"description": "Register a new user account. Username must be 3-50 characters and contain only letters, numbers, underscores, and hyphens. Password must be at least 8 characters with at least one uppercase, one lowercase, and one number."
					},
					"response": [
						{
							"name": "Successful Registration",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"john_doe\",\n  \"password\": \"MySecurePassword123\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/auth/register",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"accessToken\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n  \"refreshToken\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n  \"user\": {\n    \"id\": \"507f1f77bcf86cd799439012\",\n    \"username\": \"john_doe\"\n  }\n}"
						}
					]
				},
				{
					"name": "Login User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('accessToken', response.accessToken);",
									"    pm.environment.set('refreshToken', response.refreshToken);",
									"    pm.environment.set('userId', response.user.id);",
									"    pm.environment.set('username', response.user.username);",
									"    pm.test('Login successful', function () {",
									"        pm.expect(pm.response.code).to.eql(200);",
									"        pm.expect(response.accessToken).to.be.a('string');",
									"        pm.expect(response.refreshToken).to.be.a('string');",
									"        pm.expect(response.user.username).to.be.a('string');",
									"    });",
									"} else {",
									"    pm.test('Login failed', function () {",
									"        pm.expect(pm.response.code).to.be.oneOf([400, 401]);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"{{testUsername}}\",\n  \"password\": \"{{testPassword}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						},
						"description": "Login with existing user credentials to get access and refresh tokens."
					},
					"response": [
						{
							"name": "Successful Login",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"john_doe\",\n  \"password\": \"MySecurePassword123\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/auth/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"accessToken\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n  \"refreshToken\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n  \"user\": {\n    \"id\": \"507f1f77bcf86cd799439012\",\n    \"username\": \"john_doe\"\n  }\n}"
						}
					]
				},
				{
					"name": "Logout User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    // Clear tokens from environment after successful logout",
									"    pm.environment.unset('accessToken');",
									"    pm.environment.unset('refreshToken');",
									"    pm.test('Logout successful', function () {",
									"        pm.expect(pm.response.code).to.eql(200);",
									"        pm.expect(response.message).to.be.a('string');",
									"        pm.expect(response.loggedOutAt).to.be.a('string');",
									"    });",
									"} else {",
									"    pm.test('Logout failed', function () {",
									"        pm.expect(pm.response.code).to.be.oneOf([400, 401]);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"accessToken\": \"{{accessToken}}\",\n  \"refreshToken\": \"{{refreshToken}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"logout"
							]
						},
						"description": "Logout the user by invalidating the provided access and refresh tokens. This will invalidate both tokens on the server."
					},
					"response": [
						{
							"name": "Successful Logout",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"accessToken\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n  \"refreshToken\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/auth/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"logout"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Logout successful\",\n  \"loggedOutAt\": \"2025-09-19T16:30:00.000Z\"\n}"
						}
					]
				},
				{
					"name": "Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('accessToken', response.accessToken);",
									"    pm.environment.set('refreshToken', response.refreshToken);",
									"    pm.test('Token refresh successful', function () {",
									"        pm.expect(pm.response.code).to.eql(200);",
									"        pm.expect(response.accessToken).to.be.a('string');",
									"        pm.expect(response.refreshToken).to.be.a('string');",
									"    });",
									"} else {",
									"    pm.test('Token refresh failed', function () {",
									"        pm.expect(pm.response.code).to.be.oneOf([400, 401]);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"refreshToken\": \"{{refreshToken}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/token/refresh",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"token",
								"refresh"
							]
						},
						"description": "Refresh the access token using a valid refresh token. This will provide new access and refresh tokens."
					},
					"response": [
						{
							"name": "Successful Token Refresh",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"refreshToken\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/auth/token/refresh",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"token",
										"refresh"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"accessToken\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n  \"refreshToken\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "Projects",
			"description": "Project management endpoints - requires authentication",
			"item": [
				{
					"name": "Create Project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('lastCreatedProjectId', response.id);",
									"    pm.test('Project created successfully', function () {",
									"        pm.expect(pm.response.code).to.eql(201);",
									"        pm.expect(response.id).to.be.a('string');",
									"        pm.expect(response.name).to.eql('My Awesome Project');",
									"        pm.expect(response.gitUrl).to.eql('https://github.com/user/repo.git');",
									"        pm.expect(response.userId).to.eql(pm.environment.get('userId'));",
									"    });",
									"} else {",
									"    pm.test('Project creation failed', function () {",
									"        pm.expect(pm.response.code).to.be.oneOf([400, 401]);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"My Awesome Project\",\n  \"gitUrl\": \"https://github.com/user/repo.git\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/project",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"project"
							]
						},
						"description": "Create a new project. Requires authentication. Project name must be 1-100 characters and git URL is required."
					},
					"response": [
						{
							"name": "Successful Project Creation",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"My Awesome Project\",\n  \"gitUrl\": \"https://github.com/user/repo.git\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/project",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"project"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": \"507f1f77bcf86cd799439011\",\n  \"name\": \"My Awesome Project\",\n  \"gitUrl\": \"https://github.com/user/repo.git\",\n  \"userId\": \"507f1f77bcf86cd799439012\",\n  \"createdAt\": \"2023-09-16T10:30:00.000Z\",\n  \"updatedAt\": \"2023-09-16T10:30:00.000Z\"\n}"
						}
					]
				},
				{
					"name": "Get Projects List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.test('Projects list retrieved successfully', function () {",
									"        pm.expect(pm.response.code).to.eql(200);",
									"        pm.expect(response.projects).to.be.an('array');",
									"        pm.expect(response.total).to.be.a('number');",
									"        pm.expect(response.totalPages).to.be.a('number');",
									"        pm.expect(response.currentPage).to.be.a('number');",
									"        pm.expect(response.limit).to.be.a('number');",
									"    });",
									"    if (response.projects.length > 0) {",
									"        pm.environment.set('firstProjectId', response.projects[0].id);",
									"    }",
									"} else {",
									"    pm.test('Projects list retrieval failed', function () {",
									"        pm.expect(pm.response.code).to.eql(401);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/project/list?page=1&limit=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"project",
								"list"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"description": "Page number (default: 1)"
								},
								{
									"key": "limit",
									"value": "10",
									"description": "Items per page (default: 10)"
								}
							]
						},
						"description": "Get paginated list of user's projects. Requires authentication. Supports pagination with page and limit query parameters."
					},
					"response": [
						{
							"name": "Successful Projects List",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/project/list?page=1&limit=10",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"project",
										"list"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "limit",
											"value": "10"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"projects\": [\n    {\n      \"id\": \"507f1f77bcf86cd799439011\",\n      \"name\": \"My Awesome Project\",\n      \"gitUrl\": \"https://github.com/user/repo.git\",\n      \"userId\": \"507f1f77bcf86cd799439012\",\n      \"createdAt\": \"2023-09-16T10:30:00.000Z\",\n      \"updatedAt\": \"2023-09-16T15:45:00.000Z\"\n    }\n  ],\n  \"total\": 42,\n  \"totalPages\": 5,\n  \"currentPage\": 1,\n  \"limit\": 10\n}"
						}
					]
				},
				{
					"name": "Get Project by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.test('Project retrieved successfully', function () {",
									"        pm.expect(pm.response.code).to.eql(200);",
									"        pm.expect(response.id).to.be.a('string');",
									"        pm.expect(response.name).to.be.a('string');",
									"        pm.expect(response.gitUrl).to.be.a('string');",
									"        pm.expect(response.userId).to.be.a('string');",
									"        pm.expect(response.createdAt).to.be.a('string');",
									"        pm.expect(response.updatedAt).to.be.a('string');",
									"    });",
									"} else {",
									"    pm.test('Project retrieval failed', function () {",
									"        pm.expect(pm.response.code).to.be.oneOf([401, 404]);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/project/{{lastCreatedProjectId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"project",
								"{{lastCreatedProjectId}}"
							]
						},
						"description": "Get details of a specific project by ID. Requires authentication and user must own the project."
					},
					"response": [
						{
							"name": "Successful Project Retrieval",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/project/507f1f77bcf86cd799439011",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"project",
										"507f1f77bcf86cd799439011"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": \"507f1f77bcf86cd799439011\",\n  \"name\": \"My Awesome Project\",\n  \"gitUrl\": \"https://github.com/user/repo.git\",\n  \"userId\": \"507f1f77bcf86cd799439012\",\n  \"createdAt\": \"2023-09-16T10:30:00.000Z\",\n  \"updatedAt\": \"2023-09-16T15:45:00.000Z\"\n}"
						}
					]
				},
				{
					"name": "Update Project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.test('Project updated successfully', function () {",
									"        pm.expect(pm.response.code).to.eql(200);",
									"        pm.expect(response.id).to.be.a('string');",
									"        pm.expect(response.name).to.eql('My Updated Project');",
									"        pm.expect(response.gitUrl).to.eql('https://github.com/user/updated-repo.git');",
									"    });",
									"} else {",
									"    pm.test('Project update failed', function () {",
									"        pm.expect(pm.response.code).to.be.oneOf([400, 401, 404]);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"My Updated Project\",\n  \"gitUrl\": \"https://github.com/user/updated-repo.git\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/project/{{lastCreatedProjectId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"project",
								"{{lastCreatedProjectId}}"
							]
						},
						"description": "Update an existing project. Requires authentication and user must own the project. Both name and gitUrl are optional - only provided fields will be updated."
					},
					"response": [
						{
							"name": "Successful Project Update",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"My Updated Project\",\n  \"gitUrl\": \"https://github.com/user/updated-repo.git\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/project/507f1f77bcf86cd799439011",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"project",
										"507f1f77bcf86cd799439011"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": \"507f1f77bcf86cd799439011\",\n  \"name\": \"My Updated Project\",\n  \"gitUrl\": \"https://github.com/user/updated-repo.git\",\n  \"userId\": \"507f1f77bcf86cd799439012\",\n  \"createdAt\": \"2023-09-16T10:30:00.000Z\",\n  \"updatedAt\": \"2023-09-16T16:00:00.000Z\"\n}"
						}
					]
				},
				{
					"name": "Delete Project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.test('Project deleted successfully', function () {",
									"        pm.expect(pm.response.code).to.eql(200);",
									"        pm.expect(response.message).to.be.a('string');",
									"    });",
									"} else {",
									"    pm.test('Project deletion failed', function () {",
									"        pm.expect(pm.response.code).to.be.oneOf([401, 404]);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/project/{{lastCreatedProjectId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"project",
								"{{lastCreatedProjectId}}"
							]
						},
						"description": "Delete a project by ID. Requires authentication and user must own the project."
					},
					"response": [
						{
							"name": "Successful Project Deletion",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/project/507f1f77bcf86cd799439011",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"project",
										"507f1f77bcf86cd799439011"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Project deleted successfully\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "Health",
			"description": "System health check endpoints",
			"item": [
				{
					"name": "Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Health check successful', function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response.status).to.eql('OK');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/health",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"health"
							]
						},
						"description": "Check the health status of the API. This endpoint does not require authentication."
					},
					"response": [
						{
							"name": "Healthy Status",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/health",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"health"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"status\": \"OK\"\n}"
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global pre-request script",
					"// You can add common setup here"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test script",
					"// You can add common tests here"
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		}
	]
}
